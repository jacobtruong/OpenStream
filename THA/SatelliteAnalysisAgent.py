from GeminiAPI import *
from GoogleMapsAPI import *
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class SatelliteAnalysisAgent():
    """
    An agent dedicated to analysing satellite imagery for risk assessment.
    """

    def __init__(self, company_name: str, company_address: str, output_dir: str = "satellite_images"):
        """
        Initialises the agent, API key, and the vision model.

        Args:
            company_name (str): The name of the company to analyse.
            company_address (str): The address of the company to analyse.
            output_dir (str): Directory to save downloaded satellite images.
        """

        self.company_name = company_name
        self.company_address = company_address.strip()

        # Ensure the output directory exists
        self.output_path = Path(output_dir)
        self.output_path.mkdir(parents=True, exist_ok=True)

        # Initialise Google Maps API client
        self.maps_client = GoogleMapsAPI()

        # Initialise Gemini API client
        self.llm = GeminiAPI()

    def get_satellite_image(self, filename_prefix: str) -> str | None:
        """
        Retrieves a satellite image for a given address using the Google Maps Static API.

        Args:
            filename_prefix (str): The prefix for the output filename.

        Returns:
            str | None: The file path to the saved satellite image or None if an error occurred.
        """
        if not self.company_address:
            logging.error("Cannot get satellite image: No address provided.")
            return None

        logging.info(f"Retrieving satellite image for address: {self.company_address}")
        
        try:
            image_data = self.maps_client.get_satellite_image_bytes(self.company_address, zoom_factor=18.85)
            image_filepath = self.output_path / f"{filename_prefix}_satellite.png"
            with open(image_filepath, 'wb') as f:
                f.write(image_data)

            logging.info(f"Successfully saved satellite image to {image_filepath}")
            return str(image_filepath)
        except Exception as e:
            logging.error(f"Failed to retrieve satellite image: {e}")
            return None

    def analyze_visuals_with_llm(self, image_path: str) -> str:
        """
        Uses a multimodal LLM to analyse the satellite image for insurance risks.

        Args:
            image_path (str): The file path to the satellite image.

        Returns:
            str: The analysis report generated by the LLM.
        """
        logging.info(f"Sending satellite image at {image_path} to Vision LLM for analysis...")
        
        prompt = f"""
        You are a professional insurance underwriter tasked with analysing a satellite image of a commercial property. 
        Analyse the provided satellite image of a company location and provide a visual risk assessment covering the following points:
        Base your analysis STRICTLY on what is visible in the image.
        1.  Flood Risk Assessment: Describe the property's proximity to any visible bodies of water (rivers, lakes, coastlines, large ponds, or drainage canals). Additionally note if it appears to be in a low-lying area.
        2.  Building Condition Analysis:
            - **Roof Condition**: Assess the visible condition of the roof(s). Look for signs of discoloration, patching, ponding water, significant debris, or visible damage.
            - **Structural Integrity**: Note any visible signs of damage to the assets' exterior or structure.
            - **Site Condition**: Describe the general state of the surrounding property. Note any debris, unmaintained vegetation, or other potential hazards.
        Use British English spelling and terminology throughout the analysis.

        Follow the following structure:
        Title: Satellite Image Analysis Report: COMPANY NAME at ADDRESS
        1. Flood Risk Assessment:
        2. Building Condition Analysis:
            - **Roof Condition**:  
            - **Structural Integrity**:
            - **Site Condition**: 
        3. Disclaimer:
            
        --- COMPANY NAME ---
        {self.company_name}

        --- ADDRESS ---
        {self.company_address}

        """
        
        try:

            with open(image_path, 'rb') as f:
                image_bytes = f.read()

            response = self.llm.generate_content(prompt, image_bytes=image_bytes)
            logging.info("Successfully received visual analysis from LLM.")
            return str(response.text).strip().replace("ï¿½", "")
        
        except Exception as e:
            logging.error(f"LLM visual analysis failed: {e}")
            
            if "500 INTERNAL" in str(e):
                raise RuntimeError("IMPORTANT: 500 INTERNAL ERROR IS A SERVER-SIDED ERROR. CHANGING TO ANOTHER MODEL COULD HELP.")

            return "Error: Could not analyse satellite image."

    def run_satellite_analysis(self) -> dict:
        """
        Orchestrates the full satellite analysis process.
        
        Returns:
            A dictionary containing the image path and the analysis text.
        """
        # Fetch the image
        filename_prefix = self.company_name.lower().replace(' ', '_')
        image_path = self.get_satellite_image(filename_prefix)

        if not image_path:
            return {"image_path": None, "analysis_text": "Could not retrieve satellite image."}
            
        # 2. Analyse the image
        analysis_text = self.analyze_visuals_with_llm(image_path)
        
        return {"image_path": image_path, "analysis_text": analysis_text}